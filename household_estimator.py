#!/usr/bin/env python3
"""
Estimateur de foyers bas√© sur la population
Utilise des ratios statistiques et des donn√©es OSM pour estimer le nombre de foyers
"""

import requests
import json
import numpy as np
from typing import Dict, Tuple, Optional
import time

class HouseholdEstimator:
    def __init__(self):
        """Initialise l'estimateur de foyers"""
        
        # Ratios foyers/habitants par pays (sources: Eurostat, INSEE)
        self.household_ratios = {
            'FR': 2.2,  # France: ~2.2 personnes par m√©nage
            'DE': 2.0,  # Allemagne: ~2.0 personnes par m√©nage
            'IT': 2.3,  # Italie: ~2.3 personnes par m√©nage
            'ES': 2.5,  # Espagne: ~2.5 personnes par m√©nage
            'UK': 2.4,  # Royaume-Uni: ~2.4 personnes par m√©nage
            'PL': 2.7,  # Pologne: ~2.7 personnes par m√©nage
            'NL': 2.1,  # Pays-Bas: ~2.1 personnes par m√©nage
            'BE': 2.2,  # Belgique: ~2.2 personnes par m√©nage
            'AT': 2.1,  # Autriche: ~2.1 personnes par m√©nage
            'CH': 2.2,  # Suisse: ~2.2 personnes par m√©nage
            'SE': 2.1,  # Su√®de: ~2.1 personnes par m√©nage
            'NO': 2.2,  # Norv√®ge: ~2.2 personnes par m√©nage
            'DK': 2.1,  # Danemark: ~2.1 personnes par m√©nage
            'FI': 2.0,  # Finlande: ~2.0 personnes par m√©nage
            'IE': 2.7,  # Irlande: ~2.7 personnes par m√©nage
            'PT': 2.5,  # Portugal: ~2.5 personnes par m√©nage
            'EL': 2.4,  # Gr√®ce: ~2.4 personnes par m√©nage
            'CZ': 2.3,  # R√©publique tch√®que: ~2.3 personnes par m√©nage
            'HU': 2.3,  # Hongrie: ~2.3 personnes par m√©nage
            'SK': 2.4,  # Slovaquie: ~2.4 personnes par m√©nage
            'SI': 2.3,  # Slov√©nie: ~2.3 personnes par m√©nage
            'HR': 2.7,  # Croatie: ~2.7 personnes par m√©nage
            'RO': 2.4,  # Roumanie: ~2.4 personnes par m√©nage
            'BG': 2.5,  # Bulgarie: ~2.5 personnes par m√©nage
            'LT': 2.3,  # Lituanie: ~2.3 personnes par m√©nage
            'LV': 2.2,  # Lettonie: ~2.2 personnes par m√©nage
            'EE': 2.1,  # Estonie: ~2.1 personnes par m√©nage
            'CY': 2.4,  # Chypre: ~2.4 personnes par m√©nage
            'MT': 2.4,  # Malte: ~2.4 personnes par m√©nage
            'LU': 2.3,  # Luxembourg: ~2.3 personnes par m√©nage
            'IS': 2.4,  # Islande: ~2.4 personnes par m√©nage
            'LI': 2.3,  # Liechtenstein: ~2.3 personnes par m√©nage
            'ME': 2.8,  # Mont√©n√©gro: ~2.8 personnes par m√©nage
            'MK': 2.9,  # Mac√©doine: ~2.9 personnes par m√©nage
            'AL': 3.0,  # Albanie: ~3.0 personnes par m√©nage
            'RS': 2.8,  # Serbie: ~2.8 personnes par m√©nage
            'BA': 2.9,  # Bosnie: ~2.9 personnes par m√©nage
            'XK': 3.0,  # Kosovo: ~3.0 personnes par m√©nage
        }
        
        # Ratio par d√©faut si pays non trouv√©
        self.default_ratio = 2.3
        
        # URL de l'API Overpass
        self.overpass_url = 'http://overpass-api.de/api/interpreter'
    
    def get_household_ratio(self, country_code: str) -> float:
        """
        Obtient le ratio foyers/habitants pour un pays
        
        Args:
            country_code: Code pays (ex: 'FR', 'DE')
            
        Returns:
            float: Ratio personnes par m√©nage
        """
        return self.household_ratios.get(country_code, self.default_ratio)
    
    def estimate_households_from_population(self, population: int, country_code: str) -> int:
        """
        Estime le nombre de foyers √† partir de la population
        
        Args:
            population: Nombre d'habitants
            country_code: Code pays
            
        Returns:
            int: Nombre estim√© de foyers
        """
        if population <= 0:
            return 0
        
        ratio = self.get_household_ratio(country_code)
        households = population / ratio
        return int(round(households))
    
    def get_buildings_from_osm(self, bbox: Tuple[float, float, float, float], 
                              timeout: int = 30) -> Dict:
        """
        R√©cup√®re les donn√©es de b√¢timents depuis OpenStreetMap
        
        Args:
            bbox: Bounding box (min_lon, min_lat, max_lon, max_lat)
            timeout: Timeout en secondes
            
        Returns:
            dict: Donn√©es des b√¢timents
        """
        min_lon, min_lat, max_lon, max_lat = bbox
        
        # Requ√™te Overpass pour r√©cup√©rer les b√¢timents r√©sidentiels
        query = f'''
        [out:json][timeout:{timeout}];
        (
          way["building"="residential"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="house"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="apartments"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="detached"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="semi"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="terrace"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="bungalow"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="villa"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="farm"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="commercial"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="industrial"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="retail"]({min_lat},{min_lon},{max_lat},{max_lon});
          way["building"="office"]({min_lat},{min_lon},{max_lat},{max_lon});
        );
        out geom;
        '''
        
        try:
            response = requests.post(self.overpass_url, data=query, timeout=timeout)
            if response.status_code == 200:
                data = response.json()
                return self._analyze_buildings(data.get('elements', []))
            else:
                print(f"Erreur API Overpass: {response.status_code}")
                return {'residential_buildings': 0, 'total_buildings': 0, 'building_types': {}}
        except Exception as e:
            print(f"Erreur lors de la r√©cup√©ration des b√¢timents: {e}")
            return {'residential_buildings': 0, 'total_buildings': 0, 'building_types': {}}
    
    def _analyze_buildings(self, elements: list) -> Dict:
        """
        Analyse les donn√©es de b√¢timents OSM
        
        Args:
            elements: Liste des √©l√©ments OSM
            
        Returns:
            dict: Statistiques des b√¢timents
        """
        residential_types = {'residential', 'house', 'apartments', 'detached', 'semi', 
                           'terrace', 'bungalow', 'villa', 'farm'}
        
        building_types = {}
        residential_count = 0
        total_count = len(elements)
        
        for element in elements:
            building_type = element.get('tags', {}).get('building', 'unknown')
            building_types[building_type] = building_types.get(building_type, 0) + 1
            
            if building_type in residential_types:
                residential_count += 1
        
        return {
            'residential_buildings': residential_count,
            'total_buildings': total_count,
            'building_types': building_types,
            'residential_ratio': residential_count / total_count if total_count > 0 else 0
        }
    
    def estimate_households_advanced(self, population: int, country_code: str, 
                                   bbox: Optional[Tuple[float, float, float, float]] = None) -> Dict:
        """
        Estimation avanc√©e du nombre de foyers
        
        Args:
            population: Nombre d'habitants
            country_code: Code pays
            bbox: Bounding box pour r√©cup√©rer les donn√©es OSM (optionnel)
            
        Returns:
            dict: Estimation d√©taill√©e des foyers
        """
        # Estimation de base avec ratio statistique
        base_households = self.estimate_households_from_population(population, country_code)
        ratio = self.get_household_ratio(country_code)
        
        result = {
            'total_households': base_households,
            'population': population,
            'country_code': country_code,
            'household_ratio': ratio,
            'method': 'statistical_ratio',
            'osm_data': None
        }
        
        # Si bbox fournie, essayer d'obtenir des donn√©es OSM
        if bbox:
            print(f"üó∫Ô∏è R√©cup√©ration des donn√©es OSM pour la zone...")
            osm_data = self.get_buildings_from_osm(bbox)
            result['osm_data'] = osm_data
            
            # Ajuster l'estimation si on a des donn√©es OSM
            if osm_data['residential_buildings'] > 0:
                # Estimation bas√©e sur les b√¢timents r√©sidentiels
                # Hypoth√®se: 1-3 foyers par b√¢timent r√©sidentiel selon le type
                residential_buildings = osm_data['residential_buildings']
                
                # Estimation du nombre de foyers par b√¢timent selon le type
                households_per_building = 1.5  # Moyenne conservatrice
                
                osm_households = int(residential_buildings * households_per_building)
                
                # Prendre la moyenne pond√©r√©e entre estimation statistique et OSM
                # 70% statistique, 30% OSM
                adjusted_households = int(0.7 * base_households + 0.3 * osm_households)
                
                result['total_households'] = adjusted_households
                result['osm_households'] = osm_households
                result['method'] = 'hybrid_statistical_osm'
        
        return result

def test_household_estimator():
    """Test de l'estimateur de foyers"""
    print("üß™ Test de l'Estimateur de Foyers")
    print("=" * 50)
    
    estimator = HouseholdEstimator()
    
    # Test avec diff√©rents pays
    test_cases = [
        (100000, 'FR', 'France'),
        (50000, 'DE', 'Allemagne'),
        (75000, 'IT', 'Italie'),
        (30000, 'ES', 'Espagne'),
        (200000, 'UK', 'Royaume-Uni')
    ]
    
    for population, country, name in test_cases:
        households = estimator.estimate_households_from_population(population, country)
        ratio = estimator.get_household_ratio(country)
        
        print(f"{name} ({country}):")
        print(f"  Population: {population:,}")
        print(f"  Ratio: {ratio:.1f} pers/m√©nage")
        print(f"  Foyers estim√©s: {households:,}")
        print(f"  Densit√© foyers: {households/1000:.1f} foyers/km¬≤ (si 1km¬≤)")
        print()
    
    # Test avec donn√©es OSM (zone de Paris)
    print("üó∫Ô∏è Test avec donn√©es OSM (Paris):")
    bbox_paris = (2.34, 48.85, 2.36, 48.87)  # Petite zone de Paris
    result = estimator.estimate_households_advanced(10000, 'FR', bbox_paris)
    
    print(f"Population: {result['population']:,}")
    print(f"Foyers (statistique): {result['total_households']:,}")
    if result['osm_data']:
        print(f"B√¢timents r√©sidentiels OSM: {result['osm_data']['residential_buildings']}")
        print(f"Total b√¢timents OSM: {result['osm_data']['total_buildings']}")
        print(f"Ratio r√©sidentiel: {result['osm_data']['residential_ratio']:.1%}")

if __name__ == "__main__":
    test_household_estimator()
